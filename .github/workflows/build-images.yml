name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        postgres_version: [16, 17, 18]
        include:
          - postgres_version: 16
            dockerfile: Dockerfile.pg16
            tag_suffix: pg16
          - postgres_version: 17
            dockerfile: Dockerfile.pg17
            tag_suffix: pg17
          - postgres_version: 18
            dockerfile: Dockerfile.pg18
            tag_suffix: pg18
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.tag_suffix }}
            type=ref,event=pr,suffix=-${{ matrix.tag_suffix }}
            type=semver,pattern={{version}},suffix=-${{ matrix.tag_suffix }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.tag_suffix }}
            type=semver,pattern={{major}},suffix=-${{ matrix.tag_suffix }}
            type=raw,value=latest-${{ matrix.tag_suffix }},enable={{is_default_branch}}
            type=raw,value=${{ matrix.tag_suffix }},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test image
        run: |
          docker run --rm -d --name test-postgres-${{ matrix.postgres_version }} \
            -e POSTGRES_PASSWORD=test \
            -e POSTGRES_DB=testdb \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.tag_suffix }}
          
          # Wait for PostgreSQL to start
          sleep 30
          
          # Test extensions
          docker exec test-postgres-${{ matrix.postgres_version }} psql -U postgres -d testdb -c "SELECT version();"
          docker exec test-postgres-${{ matrix.postgres_version }} psql -U postgres -d testdb -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          docker exec test-postgres-${{ matrix.postgres_version }} psql -U postgres -d testdb -c "CREATE EXTENSION IF NOT EXISTS vector;"
          docker exec test-postgres-${{ matrix.postgres_version }} psql -U postgres -d testdb -c "SELECT PostGIS_Full_Version();"
          
          # Clean up
          docker stop test-postgres-${{ matrix.postgres_version }}